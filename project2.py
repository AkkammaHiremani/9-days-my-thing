# -*- coding: utf-8 -*-
"""project2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yJIgovOmUYNvF5h2F9n1kFhvh5iy99mG
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import confusion_matrix, classification_report,ConfusionMatrixDisplay

sns.set(style="whitegrid")

df=pd.read_csv('/content/train.csv')
print(df)

print(df.columns)

df.info()

df.describe

print("First 5 row of dataset:\n",df.head())
print("\nDataset Inof:\n")
print(df.info())
print("\nMissing values in dataset:\n,dataset.isnull().sum()")

"""Basic data Understanding

"""

df['pixel_area']=df['px_height'] = df['px_width']

x = df.drop('price_range',axis=1)
y = df['price_range']

scaler= StandardScaler()
x_scaled = scaler.fit_transform(x)

x_train,x_test,y_train,y_test = train_test_split(x_scaled,y,test_size=0.2,random_state=42)

print(x_train)

print(y_train)

x=df.drop('price_range',axis=1)
y=df['price_range']

df['pixel_area']=df['px_height']*df['px_width']

from sklearn.ensemble import RandomForestClassifier

rf_model=RandomForestClassifier(n_estimators=100,random_state=42)
rf_model.fit(x_train,y_train)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Make predictions on the test set
y_pred = rf_model.predict(x_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print("\nAccuracy:", accuracy)
print("\nConfusion Matrix:\n", conf_matrix)
print("\nClassification Report:\n", class_report)

import matplotlib.pyplot as plt # Import matplotlib.pyplot
import seaborn as sns
import pandas as pd

df=pd.read_csv('/content/train.csv')

plt.figure(figsize=(14, 10))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', linewidths=0.5, linecolor='white')
plt.title('Features Corelation Heatmap', fontsize=20)
plt.xticks(rotation=45) # Corrected typo from roatition to rotation
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

sns.countplot(x='n_cores',hue='price_range',data=df)
plt.title("Number of Cores vs price range ")
plt.show()

sns.violinplot(x='price_range',y='battery_power',data=df)
plt.title("Battery vs price range")
plt.show()

sns.pointplot(x='price_range',y='int_memory',data=df)
plt.title("Internal Memory vs Price Range")
plt.show()

sns.histplot(df['mobile_wt'],kde=True)
plt.title("Mobile Weight Distribution")
plt.show()

sns.boxplot(x='price_range',y='mobile_wt',data=df)
plt.title("weight vs Price")
plt.show()

sns.countplot(x='n_cores',hue='price_range',data=df)
plt.title("Number of Cores vs Price Range")
plt.show()

sns.stripplot(x='price_range',y='clock_speed',data=df, jitter=0.2)
plt.title("Clock Speed vs Price")
plt.show()

sns.boxplot(x='price_range', y='fc', data=df)
plt.title("Front Camara vs Price")
plt.show()

sns.boxplot(x='price_range', y='pc', data=df)
plt.title("Primary Camera vs Price")
plt.show()

sns.histplot(df['talk_time'],kde=True,bins=20)
plt.title("Talk Time Distribution")
plt.show()

sns.countplot(x='touch_screen',hue='price_range',data=df)
plt.title("Touch Screen vs Price")
plt.show()

sns.countplot(x='dual_sim',hue='price_range', data=df)
plt.title("Dual Sim vs Price")
plt.show()

sns.countplot(x='three_g', hue='price_range', data=df)
plt.title("3g Support vs Price")
plt.show()

sns.countplot(x="four_g", hue='price_range', data=df)
plt.title("46 Support vs Price")
plt.show()

sns.countplot(x='wifi',hue='price_range', data=df)
plt.title("Wifi Support vs Price")
plt.show()

sns.countplot(x='blue', hue='price_range',data=df)
plt.title('Blooth Support vs Price')
plt.show()

sns.boxplot(x='price_range', y='ram', data=df)
plt.title("RAM vs Price (Apps proxy)")
plt.show()

#Pixel Resolution Height vs Width
sns.scatterplot(x='px_height',y='px_width',hue='price_range',data=df)
plt.title("Pixel Resolution Height vs Width")
plt.show()

sns.boxplot(x='price_range', y='px_height', data=df)
plt.title("Pixel Height vs Price")
plt.show()